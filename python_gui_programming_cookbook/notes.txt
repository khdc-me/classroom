Chapter 02:
Will have better control of GUI layout embedding frames w/in frames

Notebook widget is tool that allows adding tabbed controls


Chapter 03:
message box: pop-up that gives user feedback.
    - informational, display potential or major errors

msgbox.showinfo for information style msgs
msgbox.showwarning for warning style msgs
msgbox.showerror for error style msgs
response = msgbox.askyesnocancel to prompt user for 'Yes', 'No', 'Cancel' options
    - 'Yes' is True; 'No' is False; 'Cancel' returns None
    - can be used conditional if/else
        if response:
            <do something>
        elif not response:
            <do something else>
        else:
            <do nothing | Cancelled detected>


Chapter 04:
set/get values from tkinter widgets in similar way to Java getter/setter methods

StringVar() holds string, default: ""
IntVar() holds integer, default: 0
DoubleVar() holds float, default: 0.0
BooleanVar() holds boolean, returns 0 if False; 1 if True

Prefix variable names w/ an underscore to hint at the name being a private helper
Postfix an underscore to a variable to use what would otherwise be a built-in Python name (ie: len_)
- last resort; avoid if at all possible


Chapter 05:
Processes are isolated by design & don't share common data.
- Must use Inter Process Communication (IPC)
Threads DO share common data, code, files


Chapter 08:
Modularize code by separating internationalized settings into separate files (XML, csv), or into a DB (mysql, sqlite)
- 'separation of concerns' that is at heart of OOP
- avoid hard-coding strings displayed by GUI

Some developers add test code in __main__
- better to separate test code from application code
- PyUnit, pytest, etc

In TDD, develop unit tests before writing application code. Once written, create non-existing method w/ minimum amount of code necessary to make unit test pass.

Unit tests can serve as documentation of what code is expected to do


Chapter 11:
